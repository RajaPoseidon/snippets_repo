import React, { useMemo } from 'react';
import ReactECharts from 'echarts-for-react';
import type { EChartsOption, SeriesOption } from 'echarts';

interface DataInfo {
  x: string[];
  y: {
    [key: string]: number[];
  };
}

type ScaleType = 'B' | 'M' | 'K' | 'comma';

interface SeriesMeta {
  name: string;
  data: number[];
  max: number;
  scaleType: ScaleType;
}

const MultiSeriesChartApp: React.FC = () => {
  const dataInfo: DataInfo = {
    x: ['2Q23', '3Q23', '4Q23', '1Q24', '2Q24'],
    y: {
      ML: [1024519, 753843, 404312, 409040, 338590]
    }
  };

  const { x: xAxisLabels, y } = dataInfo;
  const seriesData = Object.entries(y).map(([name, data]) => ({ name, data }));

  const getScaleType = (max: number): ScaleType => {
    if (max >= 1e9) return 'B';
    if (max >= 1e6) return 'M';
    if (max >= 1e3) return 'K';
    return 'comma';
  };

  const formatValue = (val: number, scaleType: ScaleType): string => {
    if (scaleType === 'B') return (val / 1e9).toFixed(2) + 'B';
    if (scaleType === 'M') return (val / 1e6).toFixed(2) + 'M';
    if (scaleType === 'K') return (val / 1e3).toFixed(2) + 'K';
    return val.toLocaleString();
  };

  const metaSeries: SeriesMeta[] = useMemo(() => {
    return seriesData.map((s) => {
      const max = Math.max(...s.data);
      const scaleType = getScaleType(max);
      return {
        ...s,
        max,
        scaleType
      };
    });
  }, [seriesData]);

  const option: EChartsOption = useMemo(() => {
    if (!seriesData.length) return {};

    const globalMax = Math.max(...metaSeries.map((s) => s.max));
    const globalScale = getScaleType(globalMax);

    return {
      title: { text: 'Multi-Series Chart with Smart Tooltips' },
      tooltip: {
        trigger: 'axis',
        formatter: (params: any[]) => {
          return (
            params[0].axisValue +
            '<br/>' +
            params
              .map((item) => {
                const s = metaSeries.find((x) => x.name === item.seriesName);
                return `${item.marker} ${item.seriesName}: ${formatValue(item.data, s?.scaleType || 'comma')}`;
              })
              .join('<br/>')
          );
        }
      },
      legend: {
        data: metaSeries.map((s) => s.name)
      },
      xAxis: {
        type: 'category',
        boundaryGap: false,
        data: xAxisLabels
      },
      yAxis: {
        type: 'value',
        axisLabel: {
          formatter: (val: number) => formatValue(val, globalScale)
        }
      },
      series: metaSeries.map((s) => ({
        name: s.name,
        type: 'line',
        data: s.data
      })) as SeriesOption[]
    };
  }, [metaSeries, xAxisLabels]);

  return <ReactECharts option={option} style={{ height: 400 }} />;
};

export default MultiSeriesChartApp;
