import React, { useEffect, useMemo, useState } from 'react';
import ReactECharts from 'echarts-for-react';

const MultiSeriesChartApp = () => {
  const [seriesData, setSeriesData] = useState([]);

  useEffect(() => {
    async function fetchData() {
      const response = await new Promise((resolve) =>
        setTimeout(
          () =>
            resolve([
              {
                name: 'Revenue',
                data: [1024519,753843,404312,409040,338590],
              },
            ]),
          500
        )
      );
      //@ts-ignore
      setSeriesData(response);
    }
    fetchData();
  }, []);

  //@ts-ignore
  const getScaleType = (max) => {
    if (max >= 1e9) return 'B';
    if (max >= 1e6) return 'M';
    return 'comma';
  };

  //@ts-ignore
  const formatValue = (val, scaleType) => {
    if (scaleType === 'B') return (val / 1e9).toFixed(2) + 'B';
    if (scaleType === 'M') return (val / 1e6).toFixed(2) + 'M';
    return val.toLocaleString();
  };

  const metaSeries = useMemo(() => {
    return seriesData.map((s) => {
      //@ts-ignore
      const max = Math.max(...s.data);
      const scaleType = getScaleType(max);
      return {
        //@ts-ignore
        ...s,
        max,
        scaleType
      };
    });
  }, [seriesData]);

  const option = useMemo(() => {
    if (metaSeries.length === 0) return {};

    const globalMax = Math.max(...metaSeries.map(s => s.max));
    const globalScale = getScaleType(globalMax);

    return {
      title: {
        text: 'Multi-Series Chart with Smart Tooltips'
      },
      tooltip: {
        trigger: 'axis',
        //@ts-ignore
        formatter: (params) => {
          return (
            params[0].axisValue +
            '<br/>' +
            params
              //@ts-ignore
              .map((item) => {
                const s = metaSeries.find((x) => x.name === item.seriesName);
                return `${item.marker} ${item.seriesName}: ${formatValue(
                  item.data,
                  s.scaleType
                )}`;
              })
              .join('<br/>')
          );
        }
      },
      legend: {
        data: metaSeries.map((s) => s.name)
      },
      xAxis: {
        type: 'category',
        boundaryGap: false,
        data: ['Mon', 'Tue', 'Wed', 'Thu']
      },
      yAxis: {
        type: 'value',
        axisLabel: {
        //@ts-ignore
          formatter: (val) => formatValue(val, globalScale)
        }
      },
      series: metaSeries.map((s) => ({
        name: s.name,
        type: 'line',
        data: s.data
      }))
    };
  }, [metaSeries]);

  return <ReactECharts option={option} style={{ height: 400 }} />;
};

export default MultiSeriesChartApp;
