from pydantic import BaseModel
from typing import List, Optional, Any
from datetime import datetime


class ColumnSchema(BaseModel):
    name: str
    position: int
    type_interval_type: str
    type_name: str
    type_precision: int
    type_scale: int
    type_text: str


class Schema(BaseModel):
    column_count: int
    columns: List[ColumnSchema]


class ChunkMetadata(BaseModel):
    byte_count: int
    chunk_index: int
    row_count: int
    row_offset: int


class Manifest(BaseModel):
    chunks: List[ChunkMetadata]
    format: str
    schema: Schema
    total_byte_count: int
    total_chunk_count: int
    total_row_count: int
    truncated: bool


class ExternalLink(BaseModel):
    byte_count: int
    chunk_index: int
    expiration: datetime
    external_link: str
    next_chunk_index: int
    next_chunk_internal_link: str
    row_count: int
    row_offset: int


class Result(BaseModel):
    byte_count: int
    chunk_index: int
    data_array: Any  # flexible for mixed data types
    external_links: List[ExternalLink]
    next_chunk_index: int
    next_chunk_internal_link: str
    row_count: int
    row_offset: int


class StatementError(BaseModel):
    error_code: str
    message: str


class Status(BaseModel):
    error: Optional[StatementError]
    state: str


class StatementResponse(BaseModel):
    manifest: Manifest
    result: Result
    statement_id: str
    status: Status


class GetMessageAttachmentQueryResultResponse(BaseModel):
    statement_response: StatementResponse
